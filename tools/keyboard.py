from typing import Sequence

from vkbottle import Keyboard, Text, CtxStorage
from vkbottle import KeyboardButtonColor as Color

from entities.card import Card
from entities.room import Room

storage = CtxStorage()

back = (Keyboard()
        .add(Text("–ú–µ–Ω—é"), Color.NEGATIVE)
        ).get_json()

menu = (Keyboard()
        .add(Text("–ò–≥—Ä–∞—Ç—å‚ñ∂", {"command": "play"}), Color.POSITIVE)
        .row()
        .add(Text("–ü—Ä–æ—Ñ–∏–ª—åüìä", {"command": "profile"}), Color.SECONDARY)
        .row()
        .add(Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô", {"command": "settings"}), Color.SECONDARY)
        .row()
        .add(Text("–ë–æ–Ω—É—ÅüéÅ", {"command": "bonus"}), Color.PRIMARY)
        ).get_json()

difficulty = (Keyboard()
              .add(Text("–õ—ë–≥–∫–∏–π", {"difficulty": "easy"}), Color.SECONDARY)
              .row()
              .add(Text("–°—Ä–µ–¥–Ω–∏–π", {"difficulty": "middle"}), Color.SECONDARY)
              .row()
              .add(Text("–°–ª–æ–∂–Ω—ã–π", {"difficulty": "difficult"}), Color.SECONDARY)
              .row()
              .add(Text("–ú–µ–Ω—é"), Color.NEGATIVE)
              ).get_json()


# –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
def show_cards(user_id: int, state: str) -> str:
    keyboard = Keyboard()
    room: Room = storage[user_id]

    for count, card in enumerate(sorted(room.player_cards, key=lambda c: (c.suit.value, c.rank.value)), 1):
        keyboard.add(Text(card.emoji(room.trump), {f"playing": f"choose_{state}_card", "card_id": card.ord_number}),
                     Color.PRIMARY)

        if not count % 3 and count != len(room.player_cards):
            keyboard.row()

    keyboard.row()
    if state == "defend":
        keyboard.add(Text("–í–∑—è—Ç—å", {f"playing": "abandon_the_defense"}))
    else:
        keyboard.add(Text("–ë–∏—Ç–æ!", {f"playing": "successful_defense"}))
    keyboard.row()

    keyboard.add(Text("–°–¥–∞—Ç—å—Å—èüíÄ", {f"playing": "give_up", "player": f"{state}er"}), Color.NEGATIVE)

    return keyboard.get_json()


def choose_cards_to_defend(cards: Sequence[Card], users_card: Card, user_id: int) -> str:
    keyboard = Keyboard()
    room: Room = storage[user_id]

    for count, card in enumerate(sorted(cards, key=lambda c: (c.suit.value, c.rank.value)), 1):
        keyboard.add(Text(card.emoji(room.trump),
                          {"playing": "choose_card_to_defend", "card_id": card.ord_number,
                           "users_card_id": users_card.ord_number}),
                     Color.PRIMARY)

        if not count % 3 and count != len(cards):
            keyboard.row()

    keyboard.row()
    keyboard.add(Text("–û—Ç–º–µ–Ω–∞", {f"playing": "revoke_choose_card_to_defend"}))

    return keyboard.get_json()


give_up = Keyboard(inline=True).add(Text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", {"command": "give_up"}), Color.POSITIVE).get_json()

settings = (Keyboard()
            .add(Text("–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫", {"settings": "change_nickname"}), Color.POSITIVE)
            .row()
            .add(Text("–ú–µ–Ω—é"), Color.SECONDARY)
            ).get_json()
